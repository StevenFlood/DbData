TOPIC
    about_DbData

SHORT DESCRIPTION
    DbData, the awesome replacement for Invoke-SqlCmd and Invoke-SqlCmd2.

LONG DESCRIPTION
    Invoke-Sqlcmd is littered with bugs, both past and current. DbData fulfills
    the promise of Invoke-Sqlcmd with better PowerShell semantics though without
    being a drop-in replacement.

    * Build connection strings.
    * Construct commands with injection-safe parameters.
    * Execute statements and stored procedures.
    * Write data to the database (after reading).
    * Optionally use SQL transactions.
    * Optionally use retries (for deadlocks / blocks etc).

REQUIREMENTS
    Requires PowerShell 2.0 or later.
    Requires .NET 3.5 or later installed.
    High availability options passed to New-DbConnectionString require .NET 4.5 or later installed.

EXAMPLE #1
    Connect to a database and get data back.

    Import-Module DbData
    $serverInstance = "AG1L"
    New-DbConnection $serverInstance | New-DbCommand "Select * From sys.master_files" | Get-DbData

EXAMPLE #2
    Connect to a database and get multiple result sets into different tables.

    $serverInstance = "AG1L"
    $dbData = New-DbConnection $serverInstance | New-DbCommand "Select * From sys.databases; Select * From sys.master_files" | Get-DbData -TableMapping "Databases", "Files" -Set
    $dbData.Tables["Databases"]
    $dbData.Tables["Files"]

EXAMPLE #3
    Connect to a database, begin a transaction, add data, and then rollback.

    $serverInstance = "AG1L"
    $dbData = New-DbConnection $serverInstance msdb | New-DbCommand "Select * From dbo.suspect_pages" | Enter-DbTransaction -PassThru | Get-DbData
    # Add a record
    $dbData.Alter(@{
        database_id = 1
        file_id = 1
        page_id = 1
        event_type = 1
        error_count = 1
        last_update_date = (Get-Date).ToDateTime($null)
    })
    Exit-DbTransaction $dbData -Rollback

LINKS
	https://github.com/codykonior/DbData

